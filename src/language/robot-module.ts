import type { DefaultSharedModuleContext, LangiumServices, LangiumSharedServices, Module, PartialLangiumServices } from 'langium';
import { /*AbstractExecuteCommandHandler,*/ createDefaultModule, createDefaultSharedModule, inject, /*ExecuteCommandAcceptor*/ } from 'langium';
import { RobotGeneratedModule, RobotGeneratedSharedModule } from './generated/module.js';
import { RobotValidator, registerValidationChecks } from './robot-validator.js';
import { RobotAcceptWeaver, weaveAcceptMethods } from './accept-weaver.js';
//import { parseAndGenerate, parseAndValidate } from '../web/index.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type RobotAddedServices = {
    validation: {
        RobotValidator: RobotValidator
        RobotAcceptWeaver: RobotAcceptWeaver
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type RobotServices = LangiumServices & RobotAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RobotModule: Module<RobotServices, PartialLangiumServices & RobotAddedServices> = {
    validation: {
        RobotValidator: () => new RobotValidator(),
        RobotAcceptWeaver: () => new RobotAcceptWeaver()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */

export function createRobotServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Robot: RobotServices,
} {
    const shared = inject(
        createDefaultSharedModule(context),
        RobotGeneratedSharedModule
    );
    const Robot = inject(
        createDefaultModule({ shared }),
        RobotGeneratedModule,
        RobotModule
    );
    //shared.lsp.ExecuteCommandHandler = new RobotCommandHandler();
    shared.ServiceRegistry.register(Robot);
    registerValidationChecks(Robot);
    weaveAcceptMethods(Robot);
    return { shared, Robot };
}

/*
class RobotCommandHandler extends AbstractExecuteCommandHandler {
    registerCommands(acceptor: ExecuteCommandAcceptor): void {
        // accept a single command called 'parseAndGenerate'
        acceptor('parseAndGenerate', args => {
            // invoke generator on this data, and return the response
            return parseAndGenerate(args[0]);
        });

        acceptor('parseAndValidate', args => {
            // invoke generator on this data, and return the response
            return parseAndValidate(args[0]);
        });
    }
}
*/
